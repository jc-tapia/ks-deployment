name: Deploy Kubernetes in Azure

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Terraform CLI
      run: |
        sudo apt update
        sudo apt install wget unzip
        TER_VER=`curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | grep tag_name | cut -d: -f2 | tr -d \"\,\v | awk '{$1=$1};1'`
        wget https://releases.hashicorp.com/terraform/${TER_VER}/terraform_${TER_VER}_linux_amd64.zip
        unzip -o terraform_${TER_VER}_linux_amd64.zip
        ls -la 
        sudo mv terraform /usr/local/bin/
        terraform -version
    - name: Deploy with Terraform
      run: |
        export ARM_SUBSCRIPTION_ID="d076ebe8-8d8f-4687-8a42-87f9ac3225ac"
        export ARM_TENANT_ID="${{secrets.TENANTID}}"
        export ARM_CLIENT_ID="${{secrets.SERVICEPRINCIPALID}}"
        export ARM_CLIENT_SECRET="${{secrets.SECRET}}"
        cd infrastructure
        terraform init
        terraform plan -out tfplan
        terraform show -json tfplan | jq > tfplan.json
        cat tfplan.json | jq -r '(.resource_changes[] | [.change.actions[], .type, .change.after.name]) | @tsv'
        cat tfplan.json | jq '[.resource_changes[] | {type: .type, name: .change.after.name, actions: .change.actions[]}]' 
        terraform apply tfplan

  push-image:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
    - uses: actions/checkout@v3
    - name: Install Azure CLI
      run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    - name: Login Azure CLI
      shell: pwsh
      run: |
        az login --service-principal -u "${{secrets.SERVICEPRINCIPALID}}" -p "${{secrets.SECRET}}" --tenant "${{secrets.TENANTID}}"
    - name: Build the Docker image
      run: |
        docker build . --file app/Dockerfile --tag flask-image
        docker tag flask-image myjccontainerregistry.azurecr.io/flask-image
    - name: View list images
      run: |
        docker images
    - name: Push image to ACR
      run: |
        az acr login -n myjccontainerregistry
        docker login myjccontainerregistry.azurecr.io -u "${{secrets.SERVICEPRINCIPALID}}" -p "${{secrets.SECRET}}"
        docker push myjccontainerregistry.azurecr.io/flask-image

  deploy-aks:
    runs-on: ubuntu-latest
    needs: push-image
    steps:
    - uses: actions/checkout@v3
    - name: Install Azure CLI
      run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    - name: Login Azure CLI
      shell: pwsh
      run: |
        az login --service-principal -u "${{secrets.SERVICEPRINCIPALID}}" -p "${{secrets.SECRET}}" --tenant "${{secrets.TENANTID}}"

    - name: Get ACR credentials
      run: |
        az acr update -n myjccontainerregistry -g myJcResourceGroupAks --admin-enabled true
        ACR_USERNAME=$(az acr credential show -g myJcResourceGroupAks  -n myjccontainerregistry --query username -o tsv)
        ACR_PASSWORD=$(az acr credential show -g myJcResourceGroupAks  -n myjccontainerregistry --query passwords[0].value -o tsv)
        echo "::add-mask::${ACR_USERNAME}"
        echo "::set-output name=username::${ACR_USERNAME}"
        echo "::add-mask::${ACR_PASSWORD}"
        echo "::set-output name=password::${ACR_PASSWORD}"
      id: get-acr-creds

    - name: Set AKS context
      id: set-context
      uses: azure/aks-set-context@v3
      with:
        resource-group: 'myJcResourceGroupAks' 
        cluster-name: 'MyJckubernetesCluster'

    - name: Set imagePullSecret
      uses: azure/k8s-create-secret@v4
      with:
        namespace: 'default'
        secret-name: 'secretName'
        container-registry-url: 'myjccontainerregistry.contoso.com'
        container-registry-username: ${{ steps.get-acr-creds.outputs.username }}
        container-registry-password: ${{ steps.get-acr-creds.outputs.password }}
      id: create-secret
    

    - name: Setup kubectl
      id: install-kubectl
      uses: azure/setup-kubectl@v3

    - name: Deploy to AKS
      id: deploy-aks
      uses: Azure/k8s-deploy@v4
      with:
        namespace: 'default'
        action: deploy
        manifests: |
            kubernetes/deployment.yaml
        images: 'myjccontainerregistry.azurecr.io/flask-image:latest'
        pull: true
        imagepullsecrets: secretName